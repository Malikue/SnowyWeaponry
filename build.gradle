buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-gradle', 'version': '4.1.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = getVersion()
println('Mod version: ' + version)
group = 'sciwhiz12.snowyweaponry'
archivesBaseName = "snowyweaponry-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    data
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', 'debug'

            mods {
                snowyweaponry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', 'debug'

            mods {
                snowyweaponry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'snowyweaponry', '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            mods {
                snowyweaponry {
                    sources sourceSets.main, sourceSets.data
                }
            }
        }
    }
}

configurations {
    dataImplementation.extendsFrom implementation
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    dataImplementation sourceSets.main.output
}

def commit_id = "unknown"
def git_timestamp = "unknown"
try {
    commit_id = grgit.head().id
    def datetime = grgit.head().dateTime
    git_timestamp = datetime.toLocalDateTime().toString() + datetime.getOffset().toString().replace(':', '')
} catch (Exception e) {
    logger.error("Error while trying to get commit info: {}", e.toString())
}
jar {
    manifest {
        attributes([
                "Specification-Title"   : "snowyweaponry",
                "Specification-Vendor"  : "sciwhiz12",
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : "sciwhiz12",
                "Build-Timestamp"       : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit"            : commit_id,
                "Git-Commit-Timestamp"  : git_timestamp
        ])
    }
    includeEmptyDirs false
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

String getVersion() {
    try {
        final String branchName = grgit.branch.current().name
        boolean non_main = !branchName.matches("\\d+.\\d+.x") && !branchName.equals("HEAD")
        if (non_main) println("Currently on non-main branch: " + branchName)
        String ver = grgit.describe(commit: grgit.head(), longDescr: non_main, tags: true)
        if (ver != null) {
            if (non_main) ver = ver + "@" + branchName
            if (ver.startsWith("v")) return ver.substring(1)
            return ver
        }
    } catch (Exception e) {
        logger.error("Error while getting version information: {}", e)
    }
    return "unknown"
}